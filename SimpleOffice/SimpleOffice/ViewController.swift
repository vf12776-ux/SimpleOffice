import Cocoa
import NaturalLanguage

class ViewController: NSViewController {
    
    // MARK: - UI Elements
    @IBOutlet weak var textView: NSTextView!
    private var nuclearButton: NSButton!
    private var pomodoroButton: NSButton!
    private var pomodoroLabel: NSTextField!
    private var saveButton: NSButton!
    private var loadButton: NSButton!
    private var exportPDFButton: NSButton!
    private var aiAssistantButton: NSButton!
    
    // MARK: - Pomodoro Timer
    private var pomodoroTimer: Timer?
    private var workTime: Int = 25 * 60
    private var breakTime: Int = 5 * 60
    private var isWorkSession: Bool = true
    private var timeRemaining: Int = 0
    
    // MARK: - Current File
    private var currentFileURL: URL?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        setupMenu()
    }
    
    private func setupUI() {
        setupTextView()
        setupNuclearButton()
        setupPomodoroSection()
        setupFileButtons()
        setupAIAssistantButton()
        setupTheming()
    }
    
    private func setupTextView() {
        textView.font = NSFont.systemFont(ofSize: 14)
        textView.string = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SimpleOffice!\n\n–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å..."
    }
    
    private func setupNuclearButton() {
        nuclearButton = NSButton(title: "üí• –ù–∞—Ö–µ—Ä –≤—Å—ë", target: self, action: #selector(nuclearOption))
        nuclearButton.frame = NSRect(x: 20, y: 20, width: 120, height: 30)
        nuclearButton.bezelStyle = .rounded
        nuclearButton.contentTintColor = .systemRed
        view.addSubview(nuclearButton)
    }
    
    private func setupPomodoroSection() {
        pomodoroButton = NSButton(title: "üçÖ –°—Ç–∞—Ä—Ç", target: self, action: #selector(togglePomodoro))
        pomodoroButton.frame = NSRect(x: 160, y: 20, width: 100, height: 30)
        pomodoroButton.bezelStyle = .rounded
        view.addSubview(pomodoroButton)
        
        pomodoroLabel = NSTextField(labelWithString: "25:00")
        pomodoroLabel.frame = NSRect(x: 270, y: 20, width: 60, height: 30)
        pomodoroLabel.alignment = .center
        pomodoroLabel.font = NSFont.monospacedDigitSystemFont(ofSize: 14, weight: .medium)
        view.addSubview(pomodoroLabel)
    }
    
    private func setupFileButtons() {
        saveButton = NSButton(title: "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", target: self, action: #selector(saveDocument))
        saveButton.frame = NSRect(x: 350, y: 20, width: 100, height: 30)
        saveButton.bezelStyle = .rounded
        view.addSubview(saveButton)
        
        loadButton = NSButton(title: "üìÇ –û—Ç–∫—Ä—ã—Ç—å", target: self, action: #selector(loadDocument))
        loadButton.frame = NSRect(x: 460, y: 20, width: 100, height: 30)
        loadButton.bezelStyle = .rounded
        view.addSubview(loadButton)
        
        exportPDFButton = NSButton(title: "üìÑ PDF", target: self, action: #selector(exportToPDF))
        exportPDFButton.frame = NSRect(x: 570, y: 20, width: 80, height: 30)
        exportPDFButton.bezelStyle = .rounded
        view.addSubview(exportPDFButton)
    }
    
    private func setupAIAssistantButton() {
        aiAssistantButton = NSButton(title: "üß† –ò–ò –ü–æ–º–æ—â–Ω–∏–∫", target: self, action: #selector(showAIAssistant))
        aiAssistantButton.frame = NSRect(x: 660, y: 20, width: 120, height: 30)
        aiAssistantButton.bezelStyle = .rounded
        view.addSubview(aiAssistantButton)
    }
    
    // MARK: - Pomodoro Timer
    @objc private func togglePomodoro() {
        if pomodoroTimer == nil {
            startPomodoro()
        } else {
            stopPomodoro()
        }
    }
    
    private func startPomodoro() {
        timeRemaining = isWorkSession ? workTime : breakTime
        pomodoroTimer = Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: #selector(updateTimer), userInfo: nil, repeats: true)
        pomodoroButton.title = "‚è∏Ô∏è –ü–∞—É–∑–∞"
        updateTimerDisplay()
    }
    
    private func stopPomodoro() {
        pomodoroTimer?.invalidate()
        pomodoroTimer = nil
        pomodoroButton.title = "üçÖ –°—Ç–∞—Ä—Ç"
    }
    
    @objc private func updateTimer() {
        timeRemaining -= 1
        updateTimerDisplay()
        
        if timeRemaining <= 0 {
            pomodoroTimer?.invalidate()
            pomodoroTimer = nil
            
            let sessionType = isWorkSession ? "–†–∞–±–æ—Ç–∞" : "–û—Ç–¥—ã—Ö"
            showNotification(title: "Pomodoro –∑–∞–≤–µ—Ä—à–µ–Ω!", message: "–°–µ—Å—Å–∏—è \(sessionType) –∑–∞–∫–æ–Ω—á–µ–Ω–∞.")
            
            isWorkSession.toggle()
            pomodoroButton.title = "üçÖ –°—Ç–∞—Ä—Ç"
        }
    }
    
    private func updateTimerDisplay() {
        let minutes = timeRemaining / 60
        let seconds = timeRemaining % 60
        pomodoroLabel.stringValue = String(format: "%02d:%02d", minutes, seconds)
    }
    
    // MARK: - File Operations
    @objc private func saveDocument() {
        let panel = NSSavePanel()
        panel.allowedContentTypes = [.plainText]
        panel.nameFieldStringValue = "document.txt"
        
        panel.begin { response in
            if response == .OK, let url = panel.url {
                do {
                    try self.textView.string.write(to: url, atomically: true, encoding: .utf8)
                    self.currentFileURL = url
                    self.showNotification(title: "–£—Å–ø–µ—Ö!", message: "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                } catch {
                    self.showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: \(error.localizedDescription)")
                }
            }
        }
    }
    
    @objc private func loadDocument() {
        let panel = NSOpenPanel()
        panel.allowedContentTypes = [.plainText]
        
        panel.begin { response in
            if response == .OK, let url = panel.url {
                do {
                    let content = try String(contentsOf: url, encoding: .utf8)
                    self.textView.string = content
                    self.currentFileURL = url
                    self.showNotification(title: "–£—Å–ø–µ—Ö!", message: "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
                } catch {
                    self.showAlert(title: "–û—à–∏–±–∫–∞", message: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: \(error.localizedDescription)")
                }
            }
        }
    }
    
    @objc private func exportToPDF() {
        let printInfo = NSPrintInfo.shared
        let printOperation = NSPrintOperation(view: textView, printInfo: printInfo)
        printOperation.showsPrintPanel = false
        printOperation.showsProgressPanel = false
        
        let savePanel = NSSavePanel()
        savePanel.allowedContentTypes = [.pdf]
        savePanel.nameFieldStringValue = "document.pdf"
        
        savePanel.begin { response in
            if response == .OK, let url = savePanel.url {
                printInfo.dictionary()[NSPrintInfo.AttributeKey.jobDisposition] = NSPrintInfo.JobDisposition.save
                printInfo.dictionary()[NSPrintInfo.AttributeKey.jobSavingURL] = url
                printOperation.run()
                self.showNotification(title: "–£—Å–ø–µ—Ö!", message: "PDF —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            }
        }
    }
    
    // MARK: - AI Assistant
    @objc private func showAIAssistant() {
        let alert = NSAlert()
        alert.messageText = "üß† –ò–ò –ü–æ–º–æ—â–Ω–∏–∫"
        alert.informativeText = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        alert.addButton(withTitle: "üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞")
        alert.addButton(withTitle: "‚ú® –£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç")
        alert.addButton(withTitle: "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—Å—Ç")
        alert.addButton(withTitle: "‚ùå –û—Ç–º–µ–Ω–∞")
        
        let response = alert.runModal()
        
        switch response {
        case .alertFirstButtonReturn:
            showTextAnalysis()
        case .alertSecondButtonReturn:
            improveText()
        case .alertThirdButtonReturn:
            continueText()
        default:
            break
        }
    }
    
    private func showTextAnalysis() {
        let analysis = AIAssistant.analyzeText(textView.string)
        
        let alert = NSAlert()
        alert.messageText = "üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞"
        alert.informativeText = """
        –°–ª–æ–≤: \(analysis["wordCount"] ?? 0)
        –°–∏–º–≤–æ–ª–æ–≤: \(analysis["characterCount"] ?? 0)
        –ê–±–∑–∞—Ü–µ–≤: \(analysis["paragraphCount"] ?? 0)
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: \(analysis["sentiment"] ?? "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: \(analysis["readingTime"] ?? "?")
        """
        alert.runModal()
    }
    
    private func improveText() {
        let improvedText = AIAssistant.improveText(textView.string)
        textView.string = improvedText
        showNotification(title: "–¢–µ–∫—Å—Ç —É–ª—É—á—à–µ–Ω!", message: "–ò–ò –ø—Ä–∏–º–µ–Ω–∏–ª –º–∞–≥–∏—é ‚ú®")
    }
    
    private func continueText() {
        let continuation = AIAssistant.continueText(textView.string)
        textView.string += "\n\n" + continuation
    }
    
    // MARK: - Nuclear Option
    @objc private func nuclearOption() {
        let alert = NSAlert()
        alert.messageText = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏"
        alert.informativeText = "–¢–æ—á–Ω–æ –Ω–∞—Ö–µ—Ä –≤—Å—ë? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
        alert.addButton(withTitle: "–î–∞, –Ω–∞—Ö–µ—Ä!")
        alert.addButton(withTitle: "–û—Ç–º–µ–Ω–∞")
        
        if alert.runModal() == .alertFirstButtonReturn {
            textView.string = ""
            showNotification(title: "–¢–µ–∫—Å—Ç –ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–Ω!", message: "üí• –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")
        }
    }
    
    // MARK: - Menu
    private func setupMenu() {
        let mainMenu = NSMenu()
        
        // File Menu
        let fileMenu = NSMenu(title: "–§–∞–π–ª")
        let fileMenuItem = NSMenuItem(title: "–§–∞–π–ª", action: nil, keyEquivalent: "")
        fileMenuItem.submenu = fileMenu
        mainMenu.addItem(fileMenuItem)
        
        fileMenu.addItem(NSMenuItem(title: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", action: #selector(saveDocument), keyEquivalent: "s"))
        fileMenu.addItem(NSMenuItem(title: "–û—Ç–∫—Ä—ã—Ç—å", action: #selector(loadDocument), keyEquivalent: "o"))
        fileMenu.addItem(NSMenuItem(title: "–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF", action: #selector(exportToPDF), keyEquivalent: "e"))
        fileMenu.addItem(NSMenuItem.separator())
        fileMenu.addItem(NSMenuItem(title: "–í—ã–π—Ç–∏", action: #selector(NSApplication.terminate(_:)), keyEquivalent: "q"))
        
        // Edit Menu
        let editMenu = NSMenu(title: "–ü—Ä–∞–≤–∫–∞")
        let editMenuItem = NSMenuItem(title: "–ü—Ä–∞–≤–∫–∞", action: nil, keyEquivalent: "")
        editMenuItem.submenu = editMenu
        mainMenu.addItem(editMenuItem)
        
        editMenu.addItem(NSMenuItem(title: "–í—ã—Ä–µ–∑–∞—Ç—å", action: #selector(NSText.cut(_:)), keyEquivalent: "x"))
        editMenu.addItem(NSMenuItem(title: "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", action: #selector(NSText.copy(_:)), keyEquivalent: "c"))
        editMenu.addItem(NSMenuItem(title: "–í—Å—Ç–∞–≤–∏—Ç—å", action: #selector(NSText.paste(_:)), keyEquivalent: "v"))
        editMenu.addItem(NSMenuItem(title: "–í—ã–¥–µ–ª–∏—Ç—å –≤—Å—ë", action: #selector(NSText.selectAll(_:)), keyEquivalent: "a"))
        
        // AI Menu
        let aiMenu = NSMenu(title: "–ò–ò –ü–æ–º–æ—â–Ω–∏–∫")
        let aiMenuItem = NSMenuItem(title: "–ò–ò –ü–æ–º–æ—â–Ω–∏–∫", action: nil, keyEquivalent: "")
        aiMenuItem.submenu = aiMenu
        mainMenu.addItem(aiMenuItem)
        
        aiMenu.addItem(NSMenuItem(title: "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞", action: #selector(showTextAnalysis), keyEquivalent: "l"))
        aiMenu.addItem(NSMenuItem(title: "–£–ª—É—á—à–∏—Ç—å —Ç–µ–∫—Å—Ç", action: #selector(improveText), keyEquivalent: "u"))
        aiMenu.addItem(NSMenuItem(title: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—Å—Ç", action: #selector(continueText), keyEquivalent: "y"))
        
        NSApp.mainMenu = mainMenu
    }
    
    // MARK: - Theming & Utilities
    private func setupTheming() {
        if #available(macOS 10.14, *) {
            view.window?.appearance = NSAppearance(named: .darkAqua)
        }
    }
    
    private func showNotification(title: String, message: String) {
        let notification = NSUserNotification()
        notification.title = title
        notification.informativeText = message
        NSUserNotificationCenter.default.deliver(notification)
    }
    
    private func showAlert(title: String, message: String) {
        let alert = NSAlert()
        alert.messageText = title
        alert.informativeText = message
        alert.runModal()
    }
}

// MARK: - AI Assistant Implementation
class AIAssistant {
    static func analyzeText(_ text: String) -> [String: Any] {
        var analysis: [String: Any] = [:]
        
        // Word count
        let words = text.components(separatedBy: .whitespacesAndNewlines).filter { !$0.isEmpty }
        analysis["wordCount"] = words.count
        
        // Character count
        analysis["characterCount"] = text.count
        
        // Paragraph count
        let paragraphs = text.components(separatedBy: "\n").filter { !$0.isEmpty }
        analysis["paragraphCount"] = paragraphs.count
        
        // Reading time (approx)
        let readingTimeMinutes = Double(text.count) / 1000.0
        analysis["readingTime"] = "\(Int(readingTimeMinutes.rounded())) –º–∏–Ω"
        
        // Basic sentiment analysis
        let tagger = NLTagger(tagSchemes: [.sentimentScore])
        tagger.string = text
        let sentiment = tagger.tag(at: text.startIndex, unit: .paragraph, scheme: .sentimentScore)
        
        if let sentimentScore = sentiment.0?.rawValue, let score = Double(sentimentScore) {
            switch score {
            case ..<0: analysis["sentiment"] = "üòî –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π"
            case 0..<0.1: analysis["sentiment"] = "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
            default: analysis["sentiment"] = "üòä –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π"
            }
        } else {
            analysis["sentiment"] = "ü§î –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        }
        
        return analysis
    }
    
    static func improveText(_ text: String) -> String {
        var improved = text
        
        // Remove extra spaces
        improved = improved.replacingOccurrences(of: " +", with: " ", options: .regularExpression)
        
        // Capitalize first letter of sentences
        let sentences = improved.components(separatedBy: ". ")
        improved = sentences.map { sentence in
            guard !sentence.isEmpty else { return sentence }
            return sentence.prefix(1).uppercased() + sentence.dropFirst()
        }.joined(separator: ". ")
        
        return improved
    }
    
    static func continueText(_ text: String) -> String {
        let continuations = [
            "–≠—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.",
            "–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –≤–∞–∂–Ω—ã–µ –≤—ã–≤–æ–¥—ã.",
            "–≠—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–≤–æ—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ.",
            "–ü–æ–¥–æ–±–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞—Å–ª—É–∂–∏–≤–∞—é—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è.",
            "–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º—ã –ø–æ–ª—É—á–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å."
        ]
        
        return continuations.randomElement() ?? "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –º—ã—Å–ª–∏..."
    }
}
